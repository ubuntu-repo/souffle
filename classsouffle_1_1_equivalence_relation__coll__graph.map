<map id="souffle::EquivalenceRelation&lt; TupleType &gt;" name="souffle::EquivalenceRelation&lt; TupleType &gt;">
<area shape="rect" id="node2" href="$classsouffle_1_1shared__mutex.html" title="{souffle::shared_mutex\n||+ lock()\l+ lock_shared()\l+ shared_mutex()\l+ try_lock()\l+ try_lock_shared()\l+ unlock()\l+ unlock_shared()\l}" alt="" coords="159,1049,323,1214"/>
<area shape="rect" id="node6" href="$classsouffle_1_1_sparse_disjoint_set.html" title="{souffle::SparseDisjointSet\l\&lt; value_type \&gt;\n||+ clear()\l+ contains()\l+ findNode()\l+ makeNode()\l+ nodeExists()\l+ operator=()\l+ operator=()\l+ sameSet()\l+ size()\l+ SparseDisjointSet()\l+ SparseDisjointSet()\l+ SparseDisjointSet()\l+ toDense()\l+ toSparse()\l+ unionNodes()\l}" alt="" coords="619,983,805,1280"/>
<area shape="rect" id="node8" href="$classsouffle_1_1_random_insert_piggy_list.html" title="{souffle::RandomInsertPiggy\lList\&lt; value_type \&gt;\n||+ clear()\l+ freeList()\l+ get()\l+ getBlock()\l+ insertAt()\l+ operator=()\l+ operator=()\l+ RandomInsertPiggyList()\l+ RandomInsertPiggyList()\l+ RandomInsertPiggyList()\l+ RandomInsertPiggyList()\l+ size()\l+ ~RandomInsertPiggyList()\l}" alt="" coords="876,248,1079,516"/>
<area shape="rect" id="node15" href="$classsouffle_1_1_piggy_list.html" title="{souffle::PiggyList\l\&lt; std::atomic\&lt; block_t \&gt; \&gt;\n||+ append()\l+ begin()\l+ clear()\l+ createNode()\l+ end()\l+ freeList()\l+ get()\l+ getBlock()\l+ operator=()\l+ PiggyList()\l+ PiggyList()\l+ PiggyList()\l+ PiggyList()\l+ size()\l+ ~PiggyList()\l}" alt="" coords="613,233,811,531"/>
<area shape="rect" id="node11" href="$classsouffle_1_1_spin_lock.html" title="A &#39;sequential&#39; non&#45;locking implementation for a spin lock. " alt="" coords="669,5,798,127"/>
<area shape="rect" id="node14" href="$classsouffle_1_1_disjoint_set.html" title="Structure that emulates a Disjoint Set, i.e. " alt="" coords="641,593,783,891"/>
</map>
