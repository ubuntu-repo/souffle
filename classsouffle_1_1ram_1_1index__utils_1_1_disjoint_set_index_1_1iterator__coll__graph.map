<map id="souffle::ram::index_utils::DisjointSetIndex&lt; Index &gt;::iterator" name="souffle::ram::index_utils::DisjointSetIndex&lt; Index &gt;::iterator">
<area shape="rect" id="node3" href="$structsouffle_1_1ram_1_1_tuple.html" title="{souffle::ram::Tuple\l\&lt; RamDomain, 2 \&gt;\n||+ operator!=()\l+ operator\&lt;()\l+ operator==()\l+ operator\&gt;()\l+ operator[]()\l+ operator[]()\l}" alt="" coords="651,1725,797,1890"/>
<area shape="rect" id="node5" href="$classsouffle_1_1_equivalence_relation_1_1iterator.html" title="{souffle::EquivalenceRelation\l\&lt; TupleType \&gt;::iterator\n||+ iterator()\l+ iterator()\l+ iterator()\l+ iterator()\l+ iterator()\l+ iterator()\l+ iterator()\l+ operator!=()\l+ operator*()\l+ operator++()\land 7 more...\l}" alt="" coords="1397,1688,1595,1927"/>
<area shape="rect" id="node7" href="$classsouffle_1_1_piggy_list.html" title="{souffle::PiggyList\&lt; T \&gt;\n||+ append()\l+ begin()\l+ clear()\l+ createNode()\l+ end()\l+ freeList()\l+ get()\l+ getBlock()\l+ operator=()\l+ PiggyList()\l+ PiggyList()\l+ PiggyList()\l+ PiggyList()\l+ size()\l+ ~PiggyList()\l}" alt="" coords="181,241,347,523"/>
<area shape="rect" id="node19" href="$classsouffle_1_1_random_insert_piggy_list.html" title="{souffle::RandomInsertPiggy\lList\&lt; value_type \&gt;\n||+ clear()\l+ freeList()\l+ get()\l+ getBlock()\l+ insertAt()\l+ operator=()\l+ operator=()\l+ RandomInsertPiggyList()\l+ RandomInsertPiggyList()\l+ RandomInsertPiggyList()\l+ RandomInsertPiggyList()\l+ size()\l+ ~RandomInsertPiggyList()\l}" alt="" coords="841,248,1044,516"/>
<area shape="rect" id="node23" href="$classsouffle_1_1_piggy_list.html" title="{souffle::PiggyList\l\&lt; std::atomic\&lt; block_t \&gt; \&gt;\n||+ append()\l+ begin()\l+ clear()\l+ createNode()\l+ end()\l+ freeList()\l+ get()\l+ getBlock()\l+ operator=()\l+ PiggyList()\l+ PiggyList()\l+ PiggyList()\l+ PiggyList()\l+ size()\l+ ~PiggyList()\l}" alt="" coords="618,233,817,531"/>
<area shape="rect" id="node10" href="$classsouffle_1_1_spin_lock.html" title="A &#39;sequential&#39; non&#45;locking implementation for a spin lock. " alt="" coords="211,5,341,127"/>
<area shape="rect" id="node12" href="$classsouffle_1_1_equivalence_relation.html" title="{souffle::EquivalenceRelation\l\&lt; TupleType \&gt;\n||+ anteriorIt()\l+ antpostit()\l+ begin()\l+ clear()\l+ closure()\l+ contains()\l+ emptyPartition()\l+ end()\l+ EquivalenceRelation()\l+ extend()\land 10 more...\l# containsElement()\l&#45; genAllDisjointSetLists()\l}" alt="" coords="735,1343,934,1611"/>
<area shape="rect" id="node13" href="$classsouffle_1_1shared__mutex.html" title="{souffle::shared_mutex\n||+ lock()\l+ lock_shared()\l+ shared_mutex()\l+ try_lock()\l+ try_lock_shared()\l+ unlock()\l+ unlock_shared()\l}" alt="" coords="1085,1049,1249,1214"/>
<area shape="rect" id="node17" href="$classsouffle_1_1_sparse_disjoint_set.html" title="{souffle::SparseDisjointSet\l\&lt; value_type \&gt;\n||+ clear()\l+ contains()\l+ findNode()\l+ makeNode()\l+ nodeExists()\l+ operator=()\l+ operator=()\l+ sameSet()\l+ size()\l+ SparseDisjointSet()\l+ SparseDisjointSet()\l+ SparseDisjointSet()\l+ toDense()\l+ toSparse()\l+ unionNodes()\l}" alt="" coords="741,983,928,1280"/>
<area shape="rect" id="node22" href="$classsouffle_1_1_disjoint_set.html" title="Structure that emulates a Disjoint Set, i.e. " alt="" coords="704,593,845,891"/>
</map>
